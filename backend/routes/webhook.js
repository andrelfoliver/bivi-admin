import express from 'express';
import axios from 'axios';
import dotenv from 'dotenv';
import moment from 'moment-timezone';
import Message from '../models/Message.js';
import { enviarEmailCliente, enviarEmailFinalizacao, enviarEmailNovoContato } from '../controllers/emailcontroller.jsm';

dotenv.config();

const router = express.Router();

// Objeto para manter o contexto de cada usu√°rio (hist√≥rico, e‚Äëmail, flags, etc.)
const userContexts = {};

// Timeout para expirar o contexto (30 minutos de inatividade)
const contextTimeout = 30 * 60 * 1000;

// Conjunto para evitar processamento duplicado (usando messageId)
const processedMessages = new Set();

// Link para agendamento (atualizado)
const calendlyLink = "https://calendly.com/bivisualizerr/apresentacao-da-bivisualizer";
// Link para site oficial
const siteLink = "https://bivisualizer.com";

// Limpeza peri√≥dica dos contextos inativos (a cada 1 minuto)
setInterval(() => {
    const now = Date.now();
    Object.keys(userContexts).forEach(userId => {
        if (now - userContexts[userId].lastInteraction > contextTimeout) {
            console.log(`üóëÔ∏è Contexto do usu√°rio ${userId} limpo por inatividade.`);
            delete userContexts[userId];
        }
    });
}, 60 * 1000);

/**
 * Envia mensagem via API do WhatsApp usando a vers√£o v16.0 (como anteriormente funcional)
 */
async function sendWhatsAppMessage(to, message) {
    if (!message || typeof message !== 'string') {
        console.error('‚ùå Erro: A mensagem est√° vazia ou n√£o √© uma string.');
        return null;
    }
    try {
        const response = await axios.post(
            `https://graph.facebook.com/v16.0/${process.env.PHONE_NUMBER_ID}/messages`,
            {
                messaging_product: 'whatsapp',
                recipient_type: 'individual',
                to,
                type: 'text',
                text: { body: message }
            },
            {
                headers: {
                    Authorization: `Bearer ${process.env.WHATSAPP_API_TOKEN}`,
                    'Content-Type': 'application/json'
                }
            }
        );
        console.log('‚úÖ Mensagem enviada:', response.data);
        return response.data;
    } catch (error) {
        console.error('‚ùå Erro ao enviar mensagem:', error.response?.data || error.message);
        return null;
    }
}

/**
 * Fun√ß√£o para dividir a resposta em partes menores, se necess√°rio.
 * Aqui definimos um limite m√°ximo de caracteres por mensagem.
 */
function splitResponse(message) {
    const maxLen = 200; // ajuste conforme necess√°rio
    if (message.length <= maxLen) return [message];

    const target = Math.floor(message.length / 2);
    let breakIndex = -1;

    // Procura retroativamente por um ponto final, exclama√ß√£o ou interroga√ß√£o seguido de espa√ßo ou quebra de linha
    for (let i = target; i >= 0; i--) {
        if (/[.!?](\s|\n)/.test(message.substring(i, i + 2))) {
            breakIndex = i + 1; // quebra logo ap√≥s o sinal de pontua√ß√£o
            break;
        }
    }

    // Se n√£o encontrou retroativamente, procura a partir do meio para frente
    if (breakIndex === -1) {
        for (let i = target; i < message.length - 1; i++) {
            if (/[.!?](\s|\n)/.test(message.substring(i, i + 2))) {
                breakIndex = i + 1;
                break;
            }
        }
    }

    // Se mesmo assim n√£o encontrar, utiliza o espa√ßo mais pr√≥ximo para n√£o cortar uma palavra
    if (breakIndex === -1) {
        breakIndex = message.lastIndexOf(" ", target);
        if (breakIndex === -1) breakIndex = target;
    }

    const part1 = message.substring(0, breakIndex).trim();
    const part2 = message.substring(breakIndex).trim();
    return [part1, part2];
}

/**
 * Envia a mensagem dividida em partes menores, se necess√°rio.
 */
async function sendSplitMessage(to, messageContent) {
    const parts = splitResponse(messageContent);
    for (const part of parts) {
        await sendWhatsAppMessage(to, part);
        await saveMessage('Bivi', part, 'Bivi', null, userContexts[to]?.email, to);
        // Aguarda 500ms entre as partes para evitar sobrecarga
        await new Promise(resolve => setTimeout(resolve, 500));
    }
}

function getGreeting() {
    const hora = moment().tz('America/Sao_Paulo').hour();
    if (hora >= 5 && hora < 12) return "Bom dia";
    if (hora >= 12 && hora < 18) return "Boa tarde";
    return "Boa noite";
}

function getFirstName(fullName) {
    return fullName ? fullName.split(" ")[0] : "Cliente";
}

const respostasAgradecimento = [
    "De nada, $! üòä Se precisar de algo no futuro, estarei por aqui. Tenha um √≥timo dia! üöÄ",
    "Por nada, $! Fico feliz em ajudar. Estou √† disposi√ß√£o para o que precisar! üòâ",
    "Imagina, $! Qualquer coisa, √© s√≥ chamar. Boa sorte! üåü"
];

function getRespostaAgradecimento(primeiroNome) {
    const i = Math.floor(Math.random() * respostasAgradecimento.length);
    return respostasAgradecimento[i].replace("$", primeiroNome);
}

/**
 * Instru√ß√µes para a OpenAI (role "system")
 * [Mantenha aqui as instru√ß√µes originais conforme seu c√≥digo]
 */
const instructions = `
A BiVisualizer √© uma startup especializada em transformar dados complexos em decis√µes simples e inteligentes. Sua miss√£o √© ajudar os clientes com d√∫vidas relacionadas a dados, decis√µes estrat√©gicas e servi√ßos da BiVisualizer.

### Como responder corretamente:
- Se o usu√°rio pedir mais detalhes, forne√ßa informa√ß√µes adicionais sem repetir o que j√° foi dito.
- Se o usu√°rio digitar "sim" ap√≥s um esclarecimento, continue explicando sem reiniciar a conversa.
- Se houver erro de digita√ß√£o, tente compreender o contexto antes de dizer que n√£o entendeu.
- Se o usu√°rio disser "obrigado" ou "valeu", finalize educadamente sem reiniciar.
- **Finalize todas as respostas com uma afirma√ß√£o completa e conclusiva, sem utilizar perguntas gen√©ricas.**  
  - **Nunca termine a resposta com interroga√ß√µes como ‚ÄúComo posso te ajudar?‚Äù, ‚ÄúComo posso te auxiliar?‚Äù ou qualquer varia√ß√£o que transfira a decis√£o para o usu√°rio.**
  - Se for necess√°rio solicitar dados espec√≠ficos (por exemplo, e‚Äëmail ou agendamento), fa√ßa essa solicita√ß√£o de forma direta e contextualizada, mas sempre conclua a resposta com uma afirma√ß√£o.
  - Se a resposta j√° estiver completa e esclarecedora, finalize-a de forma assertiva, sem incluir qualquer pergunta adicional.

IMPORTANTE:
- Na primeira resposta, envie a sauda√ß√£o e a introdu√ß√£o em duas mensagens separadas.
- Depois, n√£o repita a sauda√ß√£o ou o nome do cliente.
- Use linguagem natural, emojis moderadamente e mantenha as respostas breves.
- Utilize o nome do cliente em momentos estrat√©gicos (solicitar e‚Äëmail, finalizar, etc.).
- Quando apresentar servi√ßos, utilize uma lista.

### Regras:
1. N√£o mencione o e‚Äëmail se o cliente n√£o demonstrar interesse.
2. Se o cliente enviar apenas "?", n√£o responda.
3. Se solicitar valores, encaminhe: ${calendlyLink}.
4. Se quiser conhecer os trabalhos anteriores, encaminhe para agendar uma reuni√£o com o Comercial: ${calendlyLink}.
5. Se solicitar avalia√ß√£o ou depoimento dos clientes que ja fizemos trabalhos, encaminhe: ${siteLink}.
6. Se demonstrar interesse em avan√ßar para contratar ou implementar algumas das solu√ß√µes, encaminhe para agendar uma reuni√£o: ${calendlyLink}.

### Atendimento:
- Bivi atende 24h. Se o cliente quiser agendar reuni√£o com atendimento humano, encaminhe: ${calendlyLink}.

### Exemplos:
1. "O que a Bivisualizer faz?"  
   "A BiVisualizer transforma dados complexos em decis√µes simples e inteligentes. üìä"
2. "Como posso organizar meus dados?"  
   "Podemos criar pain√©is no Power BI para consolidar seus dados. Quer saber mais?"
3. "Voc√™s trabalham com IA?"  
   "Sim! Utilizamos IA para automatizar an√°lises."
4. "Quais servi√ßos voc√™s oferecem?"  
   "Oferecemos:  
    - *Dashboards Interativos* ‚Äì Visualize dados de forma personalizada para decis√µes r√°pidas.
    - *Atendentes Virtuais Inteligentes* ‚Äì Automatize o suporte e melhore a experi√™ncia do cliente.
    - *Solu√ß√µes integradas* ‚Äì Imagine obter informa√ß√µes da evolu√ß√£o da sua empresa pelo WhatsApp e visualizar em um dashboard."
5. "Como funciona a solu√ß√£o integrada?"
    "As Solu√ß√µes integradas unem dashboards interativos e intelig√™ncia artificial. Com nossa tecnologia, voc√™ pode consultar dados da sua empresa diretamente pelo WhatsApp, e os mesmos insights s√£o exibidos no dashboard, garantindo uma an√°lise r√°pida e acess√≠vel a qualquer momento"
6. "Como acontece a integra√ß√£o com o meu sistema atual?"
    "Realizamos integra√ß√µes via API ou outros m√©todos, adaptando nossas solu√ß√µes √† sua infraestrutura. üîÑ"
7. "O sistema suporta atualiza√ß√µes di√°rias?"
    "Sim! Nosso sistema permite atualiza√ß√µes autom√°ticas ou semiautom√°ticas, ajustadas √†s suas fontes de dados."
8. "Como as atendentes virtuais podem ajudar o meu neg√≥cio?"
    "Nossas atendentes virtuais oferecem suporte 24/7 com respostas r√°pidas e personalizadas, integrando-se ao seu CRM para otimizar o atendimento, reduzir custos operacionais e melhorar a experi√™ncia dos clientes."

### Quando solicitar e‚Äëmail:
No final da conversa ‚Äì se a resposta do usu√°rio indicar despedida (ex.: "adeus", "tchau", "obg", "obrigado", "valeu", "at√© a proxima", "parabens") e nenhum e‚Äëmail estiver registrado, pergunte:
"Antes de nos despedirmos, posso enviar mais detalhes por *e‚Äëmail*. Qual √© o seu e‚Äëmail?"

### Setores e Solu√ß√µes Espec√≠ficas:
    - **Sa√∫de:** "Consolidamos dados de pacientes e resultados cl√≠nicos para facilitar an√°lises. üè•"
    - **Constru√ß√£o civil:** "Ajudamos na gest√£o de projetos, cronogramas de obras, or√ßamento e performance das equipes. üèóÔ∏è"
    - **Advocacia:** "Oferecemos dashboards para gest√£o de processos e an√°lise de performance."
    - **Esquadrias residenciais:** "Solu√ß√µes para produ√ß√£o, estoque e efici√™ncia operacional."

### Aten√ß√£o:
- **N√£o crie ou invente links que n√£o estejam explicitamente informados nas instru√ß√µes.**
`;

// Fun√ß√£o para obter resposta da IA
async function getAIResponseFromOpenAI(userInput, sender) {
    try {
        if (!userContexts[sender].history) userContexts[sender].history = [];
        // Adiciona a mensagem do usu√°rio ao hist√≥rico
        userContexts[sender].history.push({ role: 'user', content: userInput });
        const messages = [
            { role: 'system', content: instructions.trim() },
            ...userContexts[sender].history
        ];
        const response = await axios.post(
            'https://api.openai.com/v1/chat/completions',
            { model: 'gpt-3.5-turbo', messages, temperature: 0.7, max_tokens: 200 },
            { headers: { Authorization: `Bearer ${process.env.OPENAI_API_KEY}`, 'Content-Type': 'application/json' } }
        );
        const assistantReply = response.data.choices[0].message.content.trim();
        userContexts[sender].history.push({ role: 'assistant', content: assistantReply });
        return assistantReply;
    } catch (error) {
        console.error('‚ùå Erro ao obter resposta da IA:', error.response?.data || error.message);
        return "Desculpe, n√£o entendi muito bem. Poderia reformular sua pergunta?";
    }
}

async function getAIResponse(userInput, sender, senderProfile = "Cliente") {
    const primeiroNome = getFirstName(senderProfile);
    const saudacao = getGreeting();

    // Se for um novo usu√°rio ou sem intera√ß√µes, inicializa o contexto e envia sauda√ß√£o e introdu√ß√£o
    if (!userContexts[sender] || userContexts[sender].interactionCount === 0) {
        userContexts[sender] = {
            lastInteraction: Date.now(),
            name: senderProfile,
            profilePic: null,
            interactionCount: 0,
            emailSolicitado: false,
            awaitingEmailConfirmation: false,
            suggestedEmail: null,
            email: null,
            history: [],
            notifiedGestor: false,
            emailDeclined: false
        };
        // Notifica o gestor de novo contato (Modelo 2)
        await enviarEmailNovoContato(userContexts[sender].name || "Cliente", sender);
        userContexts[sender].notifiedGestor = true;
        // Inicializa a intera√ß√£o: envia sauda√ß√£o e introdu√ß√£o
        userContexts[sender].interactionCount = 1;
        const greetingMessage = `${saudacao}, ${primeiroNome}! üëã`;
        await sendWhatsAppMessage(sender, greetingMessage);
        await saveMessage('Bivi', greetingMessage, 'Bivi', null, null, sender);
        userContexts[sender].history.push({ role: 'assistant', content: greetingMessage });
        await new Promise(resolve => setTimeout(resolve, 1000));
        const introducao = "Eu sou a Bivi, assistente virtual da BiVisualizer. üöÄ Aqui, transformamos dados em solu√ß√µes inteligentes para voc√™. Como posso te ajudar hoje? üòâ";
        await sendWhatsAppMessage(sender, introducao);
        await saveMessage('Bivi', introducao, 'Bivi', null, null, sender);
        userContexts[sender].history.push({ role: 'assistant', content: introducao });
        return `${greetingMessage}\n${introducao}`;
    }

    // Para usu√°rios j√° existentes, atualiza o contexto
    userContexts[sender].interactionCount += 1;
    userContexts[sender].lastInteraction = Date.now();

    // Processa fluxo de confirma√ß√£o de e‚Äëmail, captura de e‚Äëmail, etc.
    // [Fluxo de e‚Äëmail conforme seu c√≥digo original...]
    // ...

    // Fluxo normal: obt√©m a resposta da IA usando o hist√≥rico
    const aiReply = await getAIResponseFromOpenAI(userInput, sender);
    const farewellKeywords = ["adeus", "at√© logo", "tchau", "finalizar"];
    const isFarewell = farewellKeywords.some(keyword => aiReply.toLowerCase().includes(keyword));

    if (isFarewell) {
        if (userContexts[sender].email && !userContexts[sender].emailDeclined) {
            await sendSplitMessage(sender, aiReply);
            await enviarEmailFinalizacao(userContexts[sender].name || "Cliente", userContexts[sender].email, sender);
            return aiReply;
        } else if (!userContexts[sender].email && !userContexts[sender].emailDeclined) {
            await sendSplitMessage(sender, aiReply);
            await sendWhatsAppMessage(sender, `\n\nSe desejar, voc√™ tamb√©m pode agendar uma reuni√£o com nossos especialistas. Use este link: ${calendlyLink} üòâ`);
            await saveMessage('Bivi', `Link de agendamento: ${calendlyLink}`, 'Bivi', null, userContexts[sender]?.email, sender);
            const promptEmail = "Antes de nos despedirmos, posso enviar mais detalhes por *e‚Äëmail*. Qual √© o seu e‚Äëmail?";
            await sendWhatsAppMessage(sender, promptEmail);
            await saveMessage('Bivi', promptEmail, 'Bivi', null, userContexts[sender]?.email, sender);
            return "";
        }
    } else {
        if (aiReply && aiReply.trim()) {
            await sendSplitMessage(sender, aiReply);
        }
        return aiReply;
    }
}

const popularDomains = ["gmail.com", "yahoo.com", "outlook.com", "hotmail.com", "icloud.com"];
const temporaryDomains = ["tempmail.com", "10minutemail.com", "yopmail.com", "mailinator.com"];

function getClosestDomain(typedDomain) {
    let closestMatch = null;
    let minDistance = Infinity;
    const levenshteinDistance = (a, b) => {
        const dp = Array(a.length + 1).fill(null).map(() => Array(b.length + 1).fill(null));
        for (let i = 0; i <= a.length; i++) dp[i][0] = i;
        for (let j = 0; j <= b.length; j++) dp[0][j] = j;
        for (let i = 1; i <= a.length; i++) {
            for (let j = 1; j <= b.length; j++) {
                const cost = a[i - 1] === b[j - 1] ? 0 : 1;
                dp[i][j] = Math.min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + cost);
            }
        }
        return dp[a.length][b.length];
    };
    for (const domain of popularDomains) {
        const distance = levenshteinDistance(typedDomain, domain);
        if (distance < minDistance && distance <= 2) {
            minDistance = distance;
            closestMatch = domain;
        }
    }
    return closestMatch;
}

function isValidEmail(email) {
    const emailRegex = /^[a-zA-Z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$/;
    if (!emailRegex.test(email)) return false;
    const domain = email.split("@")[1].toLowerCase();
    if (temporaryDomains.includes(domain)) return false;
    return true;
}

async function sendAndSaveMessage(sender, messageContent, senderName = "Bivi") {
    if (!messageContent || typeof messageContent !== 'string') {
        console.error('‚ùå Erro: A mensagem est√° vazia ou √© inv√°lida.');
        return;
    }
    await sendWhatsAppMessage(sender, messageContent);
    await saveMessage(senderName, messageContent, senderName, null, userContexts[sender]?.email, sender);
}

async function saveMessage(sender, messageContent, name, picture, email = null, destinatario = null) {
    if (!messageContent || typeof messageContent !== 'string') {
        console.error('‚ùå Erro: O conte√∫do da mensagem est√° vazio ou inv√°lido. N√£o foi poss√≠vel salvar.');
        return;
    }
    try {
        const msgDoc = new Message({ sender, destinatario, message: messageContent, name, picture, email });
        await msgDoc.save();
        console.log('‚úÖ Mensagem salva no DB:', msgDoc);
    } catch (error) {
        console.error('‚ùå Erro ao salvar mensagem no DB:', error.message);
    }
}

async function isAtendimentoHumanoAtivo(sender) {
    const atendimento = await Message.findOne({ sender, assumedBy: { $ne: null } }).sort({ timestamp: -1 });
    return !!atendimento;
}

router.post('/', async (req, res) => {
    try {
        const event = req.body;
        console.log("üîç Recebendo evento do Webhook:", JSON.stringify(event, null, 2));

        // Valida se o objeto √© do WhatsApp Business Account
        if (event.object !== 'whatsapp_business_account') {
            console.log("‚ùå Evento inv√°lido recebido:", JSON.stringify(event, null, 2));
            return res.status(400).send('Evento inv√°lido (n√£o √© whatsapp_business_account)');
        }

        // Obt√©m o valor contido na entrada
        const changes = event.entry?.[0]?.changes?.[0]?.value;

        // Se o evento for de status, ignora e retorna 200 OK
        if (changes?.statuses) {
            console.log("üì© Evento de status recebido. Ignorando...");
            return res.status(200).send('Evento de status ignorado');
        }

        // Processa somente se existir mensagem
        const messageData = changes?.messages?.[0];
        if (!messageData?.text?.body?.trim()) {
            return res.status(400).json({ error: "O corpo da mensagem (text.body) √© obrigat√≥rio." });
        }
        const messageId = messageData.id;
        if (!messageId) {
            return res.status(200).send("Mensagem sem ID ignorada");
        }
        if (processedMessages.has(messageId)) {
            console.log(`üîÑ Mensagem duplicada ignorada (ID: ${messageId})`);
            return res.status(200).send('Mensagem j√° processada');
        }
        processedMessages.add(messageId);
        setTimeout(() => processedMessages.delete(messageId), 5 * 60 * 1000);

        const mensagemTexto = messageData.text?.body || "";
        const sender = messageData.from;
        const senderProfile = changes?.contacts?.[0]?.profile?.name || "Cliente";
        const profilePic = changes?.contacts?.[0]?.profile?.picture || null;

        await saveMessage(sender, mensagemTexto, senderProfile, profilePic, userContexts[sender]?.email);
        console.log(`üë§ Usu√°rio: ${sender} | Mensagem: ${mensagemTexto}`);

        // ===================== NOVO C√ìDIGO =====================
        // Verifica se o atendimento humano est√° ativo para o usu√°rio
        if (await isAtendimentoHumanoAtivo(sender)) {
            console.log(`‚ö† Atendimento humano ativo para ${sender}, ignorando resposta da IA.`);
            return res.status(200).send("Atendimento humano ativo, IA n√£o responder√°.");
        }
        // ========================================================

        // Se for novo usu√°rio ou primeira intera√ß√£o: inicializa o contexto e envia sauda√ß√£o e introdu√ß√£o
        if (!userContexts[sender] || userContexts[sender].interactionCount === 0) {
            userContexts[sender] = {
                lastInteraction: Date.now(),
                name: senderProfile,
                profilePic,
                interactionCount: 0,
                emailSolicitado: false,
                awaitingEmailConfirmation: false,
                suggestedEmail: null,
                email: null,
                history: [],
                notifiedGestor: false,
                emailDeclined: false
            };
            await enviarEmailNovoContato(userContexts[sender].name || "Cliente", sender);
            userContexts[sender].notifiedGestor = true;
            userContexts[sender].interactionCount = 1;
            const greetingMessage = `${getGreeting()}, ${getFirstName(senderProfile)}! üëã`;
            await sendWhatsAppMessage(sender, greetingMessage);
            await saveMessage('Bivi', greetingMessage, 'Bivi', null, null, sender);
            userContexts[sender].history.push({ role: 'assistant', content: greetingMessage });
            await new Promise(resolve => setTimeout(resolve, 1000));
            const introducao = "Eu sou a Bivi, assistente virtual da BiVisualizer. üöÄ Aqui, transformamos dados em solu√ß√µes inteligentes para voc√™. Como posso te ajudar hoje? üòâ";
            await sendWhatsAppMessage(sender, introducao);
            await saveMessage('Bivi', introducao, 'Bivi', null, null, sender);
            userContexts[sender].history.push({ role: 'assistant', content: introducao });
            return res.status(200).send("Mensagem processada");
        } else {
            userContexts[sender].lastInteraction = Date.now();
            userContexts[sender].interactionCount += 1;
        }

        if (mensagemTexto.toLowerCase().includes("agendar reuni√£o")) {
            await agendarReuniao(sender, "01/02/2025", "15:00");
        }
        if (mensagemTexto.toLowerCase().includes("link")) {
            await enviarLink(sender, "https://bivisualizer.com");
        }
        if (["obrigado", "valeu", "obg", "agrade√ßo"].includes(mensagemTexto.toLowerCase())) {
            const resposta = getRespostaAgradecimento(getFirstName(senderProfile));
            await sendWhatsAppMessage(sender, resposta);
            await saveMessage('Bivi', resposta, 'Bivi', null, userContexts[sender]?.email, sender);
            return res.status(200).send("Agradecimento processado");
        }

        // Fluxo de e‚Äëmail: se estiver aguardando confirma√ß√£o
        if (userContexts[sender].awaitingEmailConfirmation) {
            if (["sim", "ok", "certo"].includes(mensagemTexto.trim().toLowerCase())) {
                const confirmedEmail = userContexts[sender].suggestedEmail;
                if (!isValidEmail(confirmedEmail)) {
                    await sendWhatsAppMessage(sender, "O e‚Äëmail sugerido parece inv√°lido. Por favor, envie um e‚Äëmail v√°lido.");
                    return res.status(400).send("E‚Äëmail inv√°lido.");
                }
                userContexts[sender].email = confirmedEmail;
                userContexts[sender].awaitingEmailConfirmation = false;
                await Message.updateMany({ sender }, { $set: { email: confirmedEmail } });
                // Envia e‚Äëmail de agradecimento para o cliente (Modelo 1)
                await enviarEmailCliente(userContexts[sender].name || "Cliente", confirmedEmail, sender);
                // Envia e‚Äëmail de finaliza√ß√£o para o gestor (Modelo 3)
                await enviarEmailFinalizacao(userContexts[sender].name || "Cliente", confirmedEmail, sender);
                await sendWhatsAppMessage(sender, `√ìtimo, ${getFirstName(userContexts[sender].name || "Cliente")}! Seu e‚Äëmail foi confirmado e vamos te enviar mais detalhes por e‚Äëmail. üòä`);
                await sendWhatsAppMessage(sender, `\n\nSe precisar de algo mais √© s√≥ chamar! üòâ`);
                userContexts[sender].emailSolicitado = true;
                userContexts[sender].history.push({ role: 'assistant', content: `E‚Äëmail confirmado: ${confirmedEmail}` });
                return res.status(200).send("E‚Äëmail capturado");
            } else {
                await sendWhatsAppMessage(sender, "Por favor, informe seu e‚Äëmail para que eu possa te enviar os detalhes.");
                return res.status(200).send("Aguardando e‚Äëmail");
            }
        }

        // Se a mensagem cont√©m um e‚Äëmail, processa a captura e valida√ß√£o
        const emailRegex = /\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b/;
        if (emailRegex.test(mensagemTexto)) {
            let emailExtracted = mensagemTexto.match(emailRegex)[0];
            const parts = emailExtracted.split("@");
            const domain = parts[1].toLowerCase();
            const closest = getClosestDomain(domain);
            if (closest && closest !== domain && !userContexts[sender].awaitingEmailConfirmation) {
                const suggestedEmail = `${parts[0]}@${closest}`;
                userContexts[sender].awaitingEmailConfirmation = true;
                userContexts[sender].suggestedEmail = suggestedEmail;
                await sendWhatsAppMessage(sender, `Voc√™ quis dizer *${suggestedEmail}*? Responda "sim" para confirmar ou envie o e‚Äëmail correto.`);
                return res.status(200).send("Erro de digita√ß√£o detectado no e‚Äëmail.");
            }
            if (!isValidEmail(emailExtracted)) {
                await sendWhatsAppMessage(sender, "O e‚Äëmail fornecido parece inv√°lido. Por favor, envie um e‚Äëmail v√°lido.");
                return res.status(400).send("E‚Äëmail inv√°lido.");
            }
            userContexts[sender].email = emailExtracted;
            await Message.updateMany({ sender }, { $set: { email: emailExtracted } });
            // Envia e‚Äëmail de agradecimento para o cliente (Modelo 1)
            await enviarEmailCliente(userContexts[sender].name || "Cliente", emailExtracted, sender);
            // Envia e‚Äëmail de finaliza√ß√£o para o gestor (Modelo 3)
            await enviarEmailFinalizacao(userContexts[sender].name || "Cliente", emailExtracted, sender);
            await sendWhatsAppMessage(sender, `√ìtimo, ${getFirstName(userContexts[sender].name || "Cliente")}! Seu e‚Äëmail foi confirmado e vamos te enviar mais detalhes por e‚Äëmail. üòä`);
            await sendWhatsAppMessage(sender, `\n\nSe precisar de algo mais √© s√≥ chamar! üòâ`);
            userContexts[sender].emailSolicitado = true;
            userContexts[sender].history.push({ role: 'assistant', content: `E‚Äëmail confirmado: ${emailExtracted}` });
            return res.status(200).send("E‚Äëmail capturado");
        } else if (userContexts[sender].emailSolicitado && !userContexts[sender].email) {
            if (["sim", "ok", "certo"].includes(mensagemTexto.trim().toLowerCase())) {
                await sendWhatsAppMessage(sender, "Por favor, informe seu e‚Äëmail para que eu possa te enviar os detalhes.");
                return res.status(200).send("Aguardando e‚Äëmail");
            }
        }

        // Fluxo normal: obt√©m a resposta da IA usando o hist√≥rico
        const aiReply = await getAIResponseFromOpenAI(mensagemTexto, sender);
        const farewellKeywords = ["adeus", "at√© logo", "tchau", "finalizar"];
        const isFarewell = farewellKeywords.some(keyword => aiReply.toLowerCase().includes(keyword));

        if (isFarewell) {
            if (userContexts[sender].email && !userContexts[sender].emailDeclined) {
                await sendSplitMessage(sender, aiReply);
                await enviarEmailFinalizacao(userContexts[sender].name || "Cliente", userContexts[sender].email, sender);
                return res.status(200).send("Mensagem processada (despedida com finaliza√ß√£o de e‚Äëmail)");
            } else if (!userContexts[sender].email && !userContexts[sender].emailDeclined) {
                await sendSplitMessage(sender, aiReply);
                await sendWhatsAppMessage(sender, `\n\nSe desejar, voc√™ tamb√©m pode agendar uma reuni√£o com nossos especialistas. Use este link: ${calendlyLink} üòâ`);
                await saveMessage('Bivi', `Link de agendamento: ${calendlyLink}`, 'Bivi', null, userContexts[sender]?.email, sender);
                const promptEmail = "Antes de nos despedirmos, posso enviar mais detalhes por *e‚Äëmail*. Qual √© o seu e‚Äëmail?";
                await sendWhatsAppMessage(sender, promptEmail);
                await saveMessage('Bivi', promptEmail, 'Bivi', null, userContexts[sender]?.email, sender);
                return res.status(200).send("Mensagem processada (despedida com solicita√ß√£o de e‚Äëmail)");
            }
        } else {
            if (aiReply && aiReply.trim()) {
                await sendSplitMessage(sender, aiReply);
            }
            return res.status(200).send("Mensagem processada");
        }

    } catch (error) {
        console.error('‚ùå Erro no webhook:', error.message);
        return res.status(500).send("Erro interno no servidor");
    }
});

async function agendarReuniao(sender, data, horario) {
    try {
        await sendWhatsAppMessage(sender, `Reuni√£o agendada para ${data} √†s ${horario}. Confirma?`);
    } catch (error) {
        console.error('‚ùå Erro ao agendar reuni√£o:', error.message);
    }
}

async function enviarLink(sender, link) {
    try {
        await sendWhatsAppMessage(sender, `Aqui est√° o link que voc√™ pediu: ${link}`);
    } catch (error) {
        console.error('‚ùå Erro ao enviar link:', error.message);
    }
}

export default router;